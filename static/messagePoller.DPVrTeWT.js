import{k as e,l as t}from"./uni.CnKTWU0K.js";import{a as s}from"./index-C3v_m0JD.js";const o=new class{constructor(){this.listeners=new Map,this.messageStore=new Map,this.conversationStore=new Map,this.unreadCountStore=new Map,this.isInitialized=!1}on(e,t){this.listeners.has(e)||this.listeners.set(e,[]),this.listeners.get(e).push(t)}off(e,t){if(this.listeners.has(e)){const s=this.listeners.get(e),o=s.indexOf(t);o>-1&&s.splice(o,1)}}emit(e,t){console.log(`[ChatEventBus] 触发事件: ${e}`,t),this.listeners.has(e)&&this.listeners.get(e).forEach((s=>{try{s(t)}catch(o){console.error(`[ChatEventBus] 事件处理错误: ${e}`,o)}}))}async initialize(){if(!this.isInitialized)try{const t=e("chatEventBus_conversations");t&&Object.entries(t).forEach((([e,t])=>{this.conversationStore.set(e,t)}));const s=e("chatEventBus_unreadCounts");s&&Object.entries(s).forEach((([e,t])=>{this.unreadCountStore.set(e,t)})),this.isInitialized=!0,console.log("[ChatEventBus] 初始化完成")}catch(t){console.error("[ChatEventBus] 初始化失败:",t)}}persist(){try{const e={};this.conversationStore.forEach(((t,s)=>{e[s]=t})),t("chatEventBus_conversations",e);const s={};this.unreadCountStore.forEach(((e,t)=>{s[t]=e})),t("chatEventBus_unreadCounts",s)}catch(e){console.error("[ChatEventBus] 持久化失败:",e)}}updateConversation(e,t){const s=this.conversationStore.get(e);this.conversationStore.set(e,{...s,...t,updateTime:(new Date).toISOString()}),this.persist(),this.emit("conversation-updated",{conversationId:e,data:this.conversationStore.get(e)})}updateUnreadCount(e,t){const s=this.unreadCountStore.get(e)||0;this.unreadCountStore.set(e,t),this.persist(),this.emit("unread-count-changed",{conversationId:e,oldCount:s,newCount:t,totalUnreadCount:this.getTotalUnreadCount()})}markAsRead(e){this.updateUnreadCount(e,0),this.emit("conversation-read",{conversationId:e})}onNewMessage(t,s){console.log("[ChatEventBus] 收到新消息:",{conversationId:t,messageData:s}),this.updateConversation(t,{lastMessage:s,updateTime:s.send_time||(new Date).toISOString()});const o=e("userId");if(s.sender_id!==o){const e=this.unreadCountStore.get(t)||0;this.updateUnreadCount(t,e+1)}this.emit("new-message-received",{conversationId:t,message:s,unreadCount:this.unreadCountStore.get(t)||0})}getTotalUnreadCount(){let e=0;return this.unreadCountStore.forEach((t=>{e+=t})),e}getConversation(e){return this.conversationStore.get(e)}getUnreadCount(e){return this.unreadCountStore.get(e)||0}getAllConversationIds(){return Array.from(this.conversationStore.keys())}cleanup(){const e=Date.now();this.conversationStore.forEach(((t,s)=>{t.updateTime&&e-new Date(t.updateTime).getTime()>6048e5&&(this.conversationStore.delete(s),this.unreadCountStore.delete(s))})),this.persist()}},n=()=>{try{return e("token")||e("userToken")||""}catch(t){return console.error("获取token失败:",t),""}};const i=new class{constructor(){this.isPolling=!1,this.pollTimer=null,this.pollInterval=5e3,this.lastCheckTime=null,this.consecutiveErrors=0,this.maxErrors=3,this.noMessageCount=0,this.lastMessageTime=null,this.pollingMode="all",this.currentConversationId=null,this.pauseReason=null}start(e="all",t=null){this.isPolling||(this.pollingMode=e,this.currentConversationId=t,this.pauseReason=null,console.log(`[MessagePoller] 开始消息轮询 - 模式: ${e}`,t?`会话: ${t}`:""),this.isPolling=!0,this.consecutiveErrors=0,this.lastCheckTime=new Date,this.checkMessages(),this.pollTimer=setInterval((()=>{this.checkMessages()}),this.pollInterval))}stop(){this.isPolling&&(console.log("[MessagePoller] 停止消息轮询"),this.isPolling=!1,this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null))}async checkMessages(){if(this.isPolling)try{const e=n();if(!e)return void console.log("[MessagePoller] 无token，跳过检查");const t=this.lastCheckTime||new Date(Date.now()-3e4);let o;if(console.log(`[MessagePoller] 检查新消息 - 模式: ${this.pollingMode}，时间窗口: ${t.toISOString()}`),"single"===this.pollingMode&&this.currentConversationId)o=await s.callFunction("chat",{action:"checkSingleConversationMessages",data:{conversationId:this.currentConversationId,lastCheckTime:t.toISOString()},token:e});else{if("all"!==this.pollingMode)return void console.log("[MessagePoller] 轮询已暂停:",this.pauseReason);o=await s.callFunction("chat",{action:"checkNewMessages",data:{lastCheckTime:t.toISOString()},token:e})}o&&0===o.code?(this.handleCheckResult(o.data),this.consecutiveErrors=0):(console.error("[MessagePoller] 检查消息失败:",null==o?void 0:o.msg),this.handleError()),this.lastCheckTime=new Date}catch(e){console.error("[MessagePoller] 检查消息异常:",e),this.handleError()}}async handleCheckResult(e){var t;if(!e||!e.hasNewMessages)return console.log("[MessagePoller] 无新消息"),this.noMessageCount++,void(this.noMessageCount>5&&(this.pollInterval=Math.min(1.1*this.pollInterval,1e4),console.log("[MessagePoller] 调整轮询间隔为:",this.pollInterval/1e3,"秒")));this.noMessageCount=0,this.pollInterval=3e3,this.lastMessageTime=Date.now(),console.log("[MessagePoller] 检测到新消息:",{"总数":e.totalNewCount,"影响会话数":(null==(t=e.affectedConversations)?void 0:t.length)||0}),e.affectedConversations&&e.affectedConversations.length>0&&await this.fetchAndDispatchNewMessages(e.affectedConversations)}async fetchAndDispatchNewMessages(e){try{const t=n();if(!t)return;const i=e.map((e=>e.conversationId)),a=await s.callFunction("chat",{action:"getNewMessagesDetails",data:{conversationIds:i,lastCheckTime:this.lastCheckTime.toISOString()},token:t});a&&0===a.code&&a.data&&a.data.forEach((e=>{const{conversationId:t,messages:s,conversationInfo:n}=e;n&&o.updateConversation(t,n),s&&s.length>0&&s.forEach((e=>{o.onNewMessage(t,e)}))}))}catch(t){console.error("[MessagePoller] 获取新消息详情失败:",t)}}handleError(){this.consecutiveErrors++,this.consecutiveErrors>=this.maxErrors&&(console.warn(`[MessagePoller] 连续错误${this.consecutiveErrors}次，延长轮询间隔`),this.pollInterval=Math.min(2*this.pollInterval,3e4)),this.consecutiveErrors>=2*this.maxErrors&&(console.error("[MessagePoller] 错误过多，暂停轮询"),this.stop(),setTimeout((()=>{this.isPolling||(this.pollInterval=3e3,this.start())}),3e4))}resetInterval(){this.pollInterval=3e3,this.consecutiveErrors=0}setInterval(e){this.pollInterval=Math.max(e,1e3),this.isPolling&&(this.stop(),this.start())}restart(){console.log("[MessagePoller] 重启轮询"),this.noMessageCount=0,this.pollInterval=5e3,this.consecutiveErrors=0,this.isPolling&&this.stop(),this.start()}switchToChatListMode(){console.log("[MessagePoller] 切换到聊天列表模式"),this.pollingMode="all",this.currentConversationId=null,this.pauseReason=null,this.isPolling||this.start("all")}switchToSingleChatMode(e){console.log("[MessagePoller] 切换到单聊模式:",e),this.pollingMode="single",this.currentConversationId=e,this.pauseReason=null,this.pollInterval=3e3,this.isPolling?this.restart():this.start("single",e)}pausePolling(e="用户离开"){console.log("[MessagePoller] 暂停轮询:",e),this.pollingMode="paused",this.pauseReason=e}resumePolling(){console.log("[MessagePoller] 恢复轮询"),this.pollingMode="all",this.pauseReason=null}getStatus(){return{isPolling:this.isPolling,pollingMode:this.pollingMode,currentConversationId:this.currentConversationId,pauseReason:this.pauseReason,pollInterval:this.pollInterval,noMessageCount:this.noMessageCount,consecutiveErrors:this.consecutiveErrors,lastMessageTime:this.lastMessageTime}}};export{o as c,i as m};
